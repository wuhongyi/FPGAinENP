.. verilog.rst --- 
.. 
.. Description: 
.. Author: Hongyi Wu(吴鸿毅)
.. Email: wuhongyi@qq.com 
.. Created: 四 1月  2 20:04:04 2020 (+0800)
.. Last-Updated: 三 10月 14 22:06:46 2020 (+0800)
..           By: Hongyi Wu(吴鸿毅)
..     Update #: 6
.. URL: http://wuhongyi.cn 

##################################################
verilog
##################################################

============================================================
程序结构
============================================================

Verilog 的基本设计单元是模块（module）。一个模块是由两部分组成的，一部分描述接口，一部分描述逻辑功能，用来定义怎么由输入到输出的。

Verilog 程序由三部分构成：I/O 端口声明、信号声明、功能描述。


----------------------------------------------------------------------
端口声明
----------------------------------------------------------------------

模块的端口声明了模块的输入输出接口。其格式如下：

.. code:: verilog

   module 模块名(口1, 口2, 口3, ...);

模块的端口表示的是模块的输入和输出口名，也就是说，它与别的模块联系端口的标识。在模块被引用时，在被引用的模块中，有些信号要输入到被引用的模块中，有的信号需要从被引用的模块中取出来。在引用模块时其端口可以用两种方法连接：
- 在引用时，严格按照模块定义的端口顺序来连接，不用标明原模块定义的规定的端口名，例如：模块名(连接端口1信号名,连接端口2信号名,连接端口3信号名,...);
- 在引用时用“.”符号，标明原模块时定义时规定的端口名，例如：模块名(.端口1名(连接信号1名),.端口2名(连接信号2名), ...);。这样表示的好出在于可以用端口名与被引用模块的端口相对应，而不必严格按端口顺序对应，提高了程序的可读性和可移植性。

----------------------------------------------------------------------
模块内容
----------------------------------------------------------------------

模块的内容包括 I/O 说明、内部信号声明和功能定义。

I/O 说明的格式如下：

.. code:: verilog

  // 输入口
  input [信号位宽-1:0] 端口名1;
  input [信号位宽-1:0] 端口名2;
  // ...
  input [信号位宽-1:0] 端口名i;//共有i个输入口    

  // 输出口
  output [信号位宽-1:0] 端口名1;
  output [信号位宽-1:0] 端口名2;
  // ...
  output [信号位宽-1:0] 端口名j;//共有j个输出口    

  // 输入/输出口
  inout [信号位宽-1:0] 端口名1;
  inout [信号位宽-1:0] 端口名2;
  // ...
  inout [信号位宽-1:0] 端口名k;//共有k个双向总线端口


I/O 说明也可以写在端口声明语句中。其格式如下：

.. code:: verilog

   module module_name(input port1, input port2, ..., output port1, output port2, ...);

  
在模块内部用到的与端口有关的 wire 和 reg 类型变量的声明。例如：

.. code:: verilog

   reg [width-1: 0] R变量1, R变量2;
   wire [width-1: 0] W变量1, W变量2;
   // ...

模块中最重要的部分是逻辑功能定义部分。有 3 种方法可在模块中产生逻辑。

- 用“assign”声明语句，如 assgin a = b&c;
    - 这种方法的句法很简单，只需写一个“assgin”，后面再加一个方程式即可。示例中的方程式描述了一个有两个输入的与门
- 用实例原件，如 and #2 ul(q,a,b);      
    - 采用实例元件的方法像在电路图输入方式下调入库元件一样，键入元件的名字和相连的引脚即可。
    - 这表示在设计中用到一个跟与门（and）一样的名为 ul 的与门，其输入端为 a、b，输出端为 q。输出延迟为 2 个单位时间。
    - 要求每个实例元件的名字必须是唯一的，以避免与其它调用与门（and）的实例混淆。
- 用“always”块，如 always@(posedge clk or posedge clr) begin if(clr) q<=0; else if(en) q<= d; end

采用“assgin”语句是描述组合逻辑最常用的方法之一。而“always”块既可用于描述组合逻辑，也可描述时序逻辑。用“always”块的例子生成了一个带有异步清除端的 D 触发器。“always”块可用很多描述手段来表达逻辑，例如上例就用了 if...else 语句来表达逻辑关系。如按一定的风格来编写“always”块，可以通过综合工具把源代码自动综合成用门级结构表示的组合或时序逻辑电路。
  

============================================================
数据类型及其常量和变量
============================================================

verilog 中总共有 19 种数据类型。数据类型是用来表示数字电路硬件中的数据存储和传送元素的。这里介绍 4 种最基本的数据类型，它们是：reg 型、wire 型、integer 型和 parameter 型。

verilog 语言种也有常量和变量之分，它们分别属于 19 种数据类型。下面就最常用的几种进行介绍。

----------------------------------------------------------------------
常量
----------------------------------------------------------------------

在程序运行中，其值不能被改变的量城为常量。下面首先对在 verilog 语言中使用的数字及其表示方式进行介绍。

:::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::
数字
:::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::

**整数**
  
在 verilog 中，整型常量即整常数有以下 4 种进制表示形式：
- 二进制整数（b或B）
- 十进制整数（d或D）
- 十六进制整数（h或H）
- 八进制整数（o或O）

数字表达方式有以下三种：

- <位宽><进制><数字>，这是一种全面的描述方式。
- 在 <进制><数字> 这种描述方式中，数字的位宽采用默认位宽。
- 在 <数字> 这种描述方式中，采用默认进制（十进制）。

在表达式中，位宽指明了数字的精确位数。例如：一个 4 位二进制数的数字的位宽为 4，一个 4 位十六进制数字的位宽为 16（因为每单个十六进制数就要用 4 位二进制数来表示）。

例如：

.. code:: verilog

   8'b10101100 // 位宽位 8 的数的二进制表示，'b 表示二进制
   8'ha2       // 位宽为 8 的数的十六进制表示，'h 表示十六进制

**x和z值**  

在数字电路中，x 代表不定值，z 代表高阻值。一个 x 可以用来定义十六进制数的 4 位二进制数的状态，八进制数的 3 位，二进制数的 1 位。z 的表示方式同 x 类似。z 还有一种表达方式是可以写作“?”。在使用 case 表达式时建议使用这种写法，以提高程序的可读性。

例如：

.. code:: verilog

   4'b10x0  // 位宽为 4 的二进制数从低位数起第 2 位为不定值
   4'b101z  // 位宽为 4 的二进制数从低位数起第 1 位位高阻值
   12'dz    // 位宽为 12 的十进制数，其值为高阻值（第1种表达方式）
   12'd?    // 位宽为 12 的十进制数，其值为高阻值（第2种表达方式）
   8'h4x    // 位宽为 8 的十六进制数，其低 4 位值为不定值


**负数**

一个数字可以被定义为负数，只需在位宽表达式前加一个减号，减号必须写在数字定义表达式的最前面。减号不可以放在位宽和进制之间，也不可以放在进制和具体的数之间。

例如：

.. code:: verilog

   -8'd5   // 这个表达式代表 5 的补数（用八位二进制数表示）
   8'd-5   // 非法格式

**下划线**

下划线可以用来分隔开数的表达以提高程序的可读性。

page 30

	  
  
:::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::
参数（parameter）型
:::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::


  
----------------------------------------------------------------------
变量
----------------------------------------------------------------------


:::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::
wire 型
:::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::



:::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::
reg 型
:::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::


:::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::
memory 型
:::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::




  
      
.. 
.. verilog.rst ends here
