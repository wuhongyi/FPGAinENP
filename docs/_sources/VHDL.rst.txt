.. VHDL.rst --- 
.. 
.. Description: 
.. Author: Hongyi Wu(吴鸿毅)
.. Email: wuhongyi@qq.com 
.. Created: 四 1月  2 20:03:40 2020 (+0800)
.. Last-Updated: 四 1月  2 22:18:11 2020 (+0800)
..           By: Hongyi Wu(吴鸿毅)
..     Update #: 8
.. URL: http://wuhongyi.cn 

##################################################
VHDL
##################################################




============================================================
程序结构
============================================================

一个完整的 VHDL 程序的以及各部分说明如下：

- 库(LIBRARY)
     - 存放已经编译的包集合、实体、结构体和配置等。库的好处在于使设计者可共享已经编译过的设计结果
- 包(PACKAGE)
     - 声明在实体中将用到的信号定义、常数定义、数据类型、元件语句、函数定义和过程定义等
- 实体(ENTITY)
     - 定义电路的输入/输出接口
- 结构体(ARCHITECTURE)
     - 描述电路内部的功能。一个实体可以对应很多个结构体，但在同一时间，只有一个结构体被使用
- 配置(CONFIGURATION)
     - 决定哪一个结构体被使用


----------------------------------------------------------------------
实体
----------------------------------------------------------------------

实体用于定义电路的输入/输出引脚，但并不描述电路的具体构造和实现的功能。

实体声明的格式是：

.. code:: vhdl

   ENTITY 实体名 IS
   [GENERIC (常数名: 数据类型: 设定值)] -- 类属参数说明，"[]" 中内容为可选项 
   PORT
   (
     端口名1: 端口方向 端口类型; -- 端口声明语句用分号隔开
     端口名1: 端口方向 端口类型;
       .
       .
       .
     端口名n: 端口方向 端口类型;
   );
   END [实体名]; -- 可以只用 END 结束实体声明，不一定加实体名

格式说明：

- 实体名
     - 实体名必须与文件名相同，否则编译时会出错。
- 类属参数
     - 类属参数为实体声明中的可选项，常用来规定端口的大小、信号的定时特征等。
- 端口名
     - 端口名时设计者赋予每个外部引脚的名称。
- 端口方向
     - 端口方向用来定义外部引脚的信号方向时输入还是输出（或者同时可作为输入与输出）
- 端口类型
     - 定义端口的数据类型。 VHDL 是一种强类型语言，即对语句中的所有端口信号、内部信号和操作数的数据类型有严格规定，只有相同数据类型的端口信号和操作数才能相互作用。
       
       

----------------------------------------------------------------------
结构体
----------------------------------------------------------------------

结构体描述实体内部的结构或功能。一个实体可对应多个结构体。每个结构体分别代表该实体功能的不同实现方案或不同描述方式。在同一时刻，只有一个结构体起作用，可以通过配置来决定使用哪一个结构体进行综合或仿真。

结构体的语法格式如下：

.. code:: vhdl
	  
   ARCHITECTURE 结构体名 OF 实体名 IS
   [声明语句]
   BEGIN
   功能描述语句
   END [结构体名]

实体名必须与实体声明部分所取的名字相同，而结构体名则可有设计者自由选择，但当一个实体具有多个结构体时，各结构体的取名不可相同。

声明语句用于声明该结构体将用到的信号、数据类型、常数、子程序和元件等。需要注意的是，在一个结构体内声明的数据类型、常数、子程序（包括函数和过程）和元件只能用于该结构体中。如果希望在其它的实体或结构体中引用这些定义，那么需要将其作为包来处理。

功能描述语句具体描述了结构体的功能和行为。功能描述语句可能包含有 5 种不同类型的以并行方式工作的语句结构，这几个语句结构又被称为结构体的子结构。

- 块语句（BLOCK）： 由一系列并行语句（concurrent statement）组成，从形式上划分出模块，改善程序的可读性，对综合无影响。
- 进程语句（PROCESS）： 进程内部为顺序语句，而不同进程间则是并行执行的。进程只有在某个敏感信号发生变化时才会触发。
- 信号赋值语句： 将实体内的处理结果向定义的信号或端口进行赋值。
- 子程序调用： 调用过程（PROCEDURE）或函数（FUNCTION），并将获得的结果赋值给信号。
- 元件例化语句： 调用其它设计实体描述的电路，将其作为本设计实体的一个元件。元件例化时实现层次化设计的重要语句。



----------------------------------------------------------------------
库与包的调用
----------------------------------------------------------------------

当要引用一个库时，首先要对库名进行说明，其格式为：

.. code:: vhdl

   LIBRARY 库名; -- 如 LIBRARY IEEE;  即调用IEEE标准库

对库名进行说明后，就可以使用库中已编译好的设计。而对库中程序包的访问，则必须通过 USE 语句实现，其格式为：

.. code:: vhdl

   USE 库名.程序包名.项目名; -- 如 USE IEEE.Std_logic_1164.ALL;

其中，关键字 ALL 表示本设计实体可以引用次程序包中的所有资源。   


虽然 NUMERIC_STD 有时候操作有点繁琐，但是更加规矩，并且可以有效避免一些错误，所以应该首选使用该库文件。一般来说，以下三行代码足以应付大部分的 VHDL 程序设计了。调用库和程序的语句本身在综合时并不消耗更多的资源。

.. code:: vhdl

   library ieee;
   use ieee.std_logic_1164.all;
   use ieee.numeric_std.all;



  
============================================================
基本数据类型
============================================================

。。。

**VHDL入门解惑经典实例经验总结 P40**


============================================================
数据对象
============================================================

。。。

**VHDL入门解惑经典实例经验总结 P45**





============================================================
运算符
============================================================

。。。

**VHDL入门解惑经典实例经验总结 P51**




============================================================
并行语句
============================================================

。。。

**VHDL入门解惑经典实例经验总结 P54**



============================================================
顺序语句
============================================================

。。。

**VHDL入门解惑经典实例经验总结 P67**



============================================================
VHDL中数据类型转换与移位
============================================================

----------------------------------------------------------------------
signed、unsigned以及std_logic_vector之间的区别
----------------------------------------------------------------------

首先就是 signed 与 unsigned 这两种数据类型。他们的定义为：   

.. code:: vhdl
	  
   type UNSIGNED is array (NATURAL range <>) of STD_LOGIC;
   type SIGNED is array (NATURAL range <>) of STD_LOGIC;

与 std_logic_vector 的定义完全相同，所不同的是表示的意义不同。举例来说：

"1001" 的含义对这三者而言是不同的：

- std_logic_vector : 简单的四个二进制位； 
- unsigned : 代表数字9； 
- signed : 代表数字 -7（补码表示的）；


----------------------------------------------------------------------
NUMERIC_STD
----------------------------------------------------------------------
  
使用 NUMERIC_STD 可以完全替代 std_logic_arith、std_logic_unsigned、std_logic_signed 这三个库文件！

- 首先，NUMERIC_STD 这个库文件才是血统最正的IEEE库文件！！上述的其他三个其实都是 Synopsis 这个公司的，但是由于这个公司抢先了一步，所以占据了大量的用户资源。 
- std_logic_arith、std_logic_unsigned、std_logic_signed 的问题在于当在同一文件中同时使用 signed 和 unsigned 时，会出现函数重载的冲突，导致错误。 
- 其次，NUMERIC_STD 是完全基于 signed 和 unsigned 所写的算术重载函数和数据类型转换函数。不管是 INTEGER 还是 STD_LOGIC_VECTOR 要进行算术运算，都必须转换为 signed 和 unsigned 两种数据类型。 

.. image:: /_static/img/TABLE_NUMERIC_STD.png

.. image:: /_static/img/NUMERIC_STD.png

下面举个例子来说明NUMERIC_STD库的使用。

.. code:: vhdl

   DOUT <= std_logic_vector(to_unsigned(0,64));
   DOUT(to_integer(unsigned(DIN))) <= '1';



----------------------------------------------------------------------
shift_left() and shift_right()
----------------------------------------------------------------------
  
.. code:: vhdl

   r_Unsigned_L <= shift_left(unsigned(r_Shift1), 1);
   r_Signed_L   <= shift_left(signed(r_Shift1), 1);

   r_Unsigned_R <= shift_right(unsigned(r_Shift1), 2);
   r_Signed_R   <= shift_right(signed(r_Shift1), 2)； 
 









   
.. 
.. VHDL.rst ends here
